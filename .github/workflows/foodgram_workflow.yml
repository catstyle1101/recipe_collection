  name: FoodGram workflow

  on: [push]

  jobs:
    tests:
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v2
        - name: Set up Python
          uses: actions/setup-python@v2
          with:
            python-version: 3.11

        - name: Install dependencies
          run: |
            cd backend
            python -m pip install --upgrade pip 
            pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort pytest
            pip install -r requirements.txt 

        - name: tests
          run: |
            cd ./backend/foodgram_backend
            python -m flake8
            python manage.py test
    copy_project_on_server:
      name: Copy docs and infra folders
      runs-on: ubuntu-latest
      needs: tests
      steps:
      - uses: actions/checkout@v2

      - name: create app folder
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          script: sudo rm -rf foodgram && mkdir -p foodgram && cd foodgram && mkdir docs

      - name: Copy infra files
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "infra/*"
          target: /home/${{ secrets.USER }}/foodgram/
          strip_components: 1

      - name: Copy docs files
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "docs/*"
          target: /home/${{ secrets.USER }}/foodgram/
    build_and_push_frontend_to_DockerHub:
      name: Building front image and pushing it to DockerHub
      runs-on: ubuntu-latest
      needs: copy_project_on_server
      steps:
      - uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to Docker
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push foodgram-frontend to DockerHub
        uses: docker/build-push-action@v2
        with:
          context: frontend/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_frontend

    build_and_push_backend_to_DockerHub:
        name: Push backend image and pushing it to DockerHub
        runs-on: ubuntu-latest
        needs: copy_project_on_server
        steps:
          - name: Check out the repo
            uses: actions/checkout@v2
          - name: Set up Docker Buildx
            uses: docker/setup-buildx-action@v1
          - name: Login to Docker
            uses: docker/login-action@v1
            with:
              username: ${{ secrets.DOCKER_USERNAME }}
              password: ${{ secrets.DOCKER_PASSWORD }}
          - name: Push to Docker Hub
            uses: docker/build-push-action@v2
            with:
              push: true
              tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_backend
              context: backend/
    deploy:
      runs-on: ubuntu-latest
      needs:
        - copy_project_on_server
        - build_and_push_frontend_to_DockerHub
        - build_and_push_backend_to_DockerHub
      steps:
        - name: executing remote ssh commands to deploy
          uses: appleboy/ssh-action@master
          with:
            host: ${{ secrets.HOST }}
            username: ${{ secrets.USER }}
            key: ${{ secrets.SSH_KEY }}
            script: |
              cd foodgram
              touch .env
              echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
              echo DB_NAME=${{ secrets.DB_NAME }} >> .env
              echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
              echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
              echo DB_HOST=${{ secrets.DB_HOST }} >> .env
              echo DB_PORT=${{ secrets.DB_PORT }} >> .env
              echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env
              
              sudo docker-compose down
              sudo docker image prune -f
              sudo docker-compose up -d

    send_message:
      runs-on: ubuntu-latest
      needs: deploy
      steps:
      - name: send message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: ${{ github.workflow }} успешно выполнен!
